version: '3.8'

services:
  # MQTT Broker - Eclipse Mosquitto for IoT device communication
  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: iot-cloud-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"     # MQTT (non-TLS)
      - "9001:9001"     # WebSocket
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    networks:
      - iot-cloud-network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MQTT to Kafka Bridge - Connects MQTT topics to RedPanda
  mqtt-kafka-bridge:
    build:
      context: ./services/mqtt-kafka-bridge
      no_cache: true
    container_name: iot-cloud-mqtt-bridge
    restart: unless-stopped
    environment:
      - MQTT_BROKER=iot-cloud-mqtt:1883
      - KAFKA_BROKERS=redpanda:29092
      - MQTT_TOPICS=iot/+/raw
      - KAFKA_TOPIC=iot.raw
    depends_on:
      mqtt-broker:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # RedPanda - Event streaming platform
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: iot-cloud-redpanda
    restart: unless-stopped
    ports:
      - "8084:8081"     # HTTP API (Schema Registry)
      - "8085:8082"     # Admin API (PandaProxy)
      - "9092:9092"     # Kafka API (OUTSIDE)
      - "29092:29092"   # Kafka API (PLAINTEXT)
      - "9644:9644"     # Metrics
    command:
      - redpanda
      - start
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
      - --schema-registry-addr 0.0.0.0:8081
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - iot-cloud-network
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RedPanda Console - Web UI for RedPanda management
  redpanda-console:
    image: redpandadata/console:latest
    container_name: iot-cloud-redpanda-console
    restart: unless-stopped
    ports:
      - "8086:8080"     # Web UI
    environment:
      - REDPANDA_BROKERS=redpanda:29092
      - REDPANDA_SCHEMA_REGISTRY_URL=http://redpanda:8081
      - KAFKA_BROKERS=redpanda:29092
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # Enrichment Service - Processes raw messages and adds device metadata
  enrichment-service:
    build:
      context: ./services/enrichment
      no_cache: true
    container_name: iot-cloud-enrichment
    restart: unless-stopped
    environment:
      - REDPANDA_BROKERS=redpanda:29092
      - RAW_TOPIC=iot.raw
      - ENRICHED_TOPIC=iot.enriched
      - DEVICE_REGISTRY_PATH=/app/config/device-registry.json
      - APP_REGISTRY_URL=http://appregistryservice:5000
      - FDI_PACKAGE_MANAGER_URL=http://fdi-package-manager:5000
    volumes:
      - ./config:/app/config:ro
    depends_on:
      redpanda:
        condition: service_healthy
      appregistryservice:
        condition: service_started
      fdi-package-manager:
        condition: service_started
    networks:
      - iot-cloud-network

  # Smart Breaker Simulator - Generates realistic device data via MQTT
  smart-breaker-simulator:
    build:
      context: ./services/simulator
      no_cache: true
    container_name: iot-cloud-simulator
    restart: unless-stopped
    command: ["python3", "smart_breaker_simulator_mqtt.py"]
    environment:
      - MQTT_BROKER=mqtt-broker:1883
      - DEVICE_ID=breaker-001
      - PUBLISH_INTERVAL=5
    depends_on:
      mqtt-broker:
        condition: service_started
    networks:
      - iot-cloud-network

  # Application Registry Service - Manages application registrations for device types
  appregistryservice:
    build:
      context: ./services/appregistryservice
      no_cache: true
    container_name: iot-cloud-appregistry
    restart: unless-stopped
    ports:
      - "5002:5000"
    environment:
      - FLASK_APP=src/app.py
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:////app/data/app_registry.db
    volumes:
      - appregistry_data:/app/data
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # Web App - Message flow visualization dashboard
  web-app:
    build:
      context: ./services/web-app
      no_cache: true
    container_name: iot-cloud-web-app
    restart: unless-stopped
    ports:
      - "5001:5000"
    environment:
      - REDPANDA_BROKERS=redpanda:29092
      - ENRICHED_TOPIC=iot.enriched
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # Smart Grid Monitor - Dedicated web client for smart breaker monitoring
  smart-grid-monitor:
    build:
      context: ./services/smart-grid-monitor
      no_cache: true
    container_name: iot-cloud-smart-grid-monitor
    restart: unless-stopped
    ports:
      - "5003:5000"
    environment:
      - REDPANDA_BROKERS=redpanda:29092
      - SMART_BREAKER_TOPIC=iot.smart_breaker.enriched
    depends_on:
      redpanda:
        condition: service_healthy
      enrichment-service:
        condition: service_started
    networks:
      - iot-cloud-network

  # FDI Package Manager - Manages FDI packages and provides OPC UA interface
  fdi-package-manager:
    build:
      context: ./services/fdi-package-manager
      no_cache: true
    container_name: iot-cloud-fdi-manager
    restart: unless-stopped
    ports:
      - "5004:5000"     # Web UI
      - "4840:4840"     # OPC UA
    environment:
      - FLASK_APP=web_ui.py
      - FLASK_ENV=development
    volumes:
      - fdi_packages:/app/fdi-packages
    depends_on:
      redpanda:
        condition: service_healthy
      mqtt-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - iot-cloud-network

  # TimescaleDB - Time-series database for IoT data storage and aggregation
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: iot-cloud-timescaledb
    restart: unless-stopped
    ports:
      - "5432:5432"     # PostgreSQL port
    environment:
      - POSTGRES_DB=iot_cloud
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=iot_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./config/timescaledb_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - iot-cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_cloud"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RedPanda Connect - Official connector for RedPanda to PostgreSQL/TimescaleDB
  redpanda-connect:
    image: redpandadata/connect:latest
    container_name: iot-cloud-redpanda-connect
    restart: unless-stopped
    ports:
      - "8080:8080"  # RedPanda Connect REST API
    volumes:
      - ./config/connect-configs/connect.yaml:/connect.yaml
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # RedPanda Connect - Alarm Storage Connector
  redpanda-connect-alarm-storage:
    image: redpandadata/connect:latest
    container_name: iot-cloud-redpanda-connect-alarm-storage
    restart: unless-stopped
    ports:
      - "8082:8080"  # RedPanda Connect REST API
    volumes:
      - ./config/connect-configs/alarm-sink.yaml:/connect.yaml
    depends_on:
      redpanda:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    networks:
      - iot-cloud-network

  # Alarm Processor - Python service for dynamic alarm evaluation
  alarm-processor:
    build:
      context: ./services/alarm-processor
      no_cache: true
    container_name: iot-cloud-alarm-processor
    restart: unless-stopped
    environment:
      - KAFKA_BROKER=redpanda:29092
      - DB_HOST=timescaledb
      - DB_NAME=iot_cloud
      - DB_USER=iot_user
      - DB_PASSWORD=iot_password
    depends_on:
      redpanda:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    networks:
      - iot-cloud-network



  # Schema Registry - Manages JSON schemas generated from FDI packages
  schema-registry:
    build:
      context: ./services/schema-registry
      no_cache: true
    container_name: iot-cloud-schema-registry
    restart: unless-stopped
    ports:
      - "5005:5000"
    environment:
      - SCHEMA_REGISTRY_PORT=5000
    depends_on:
      fdi-package-manager:
        condition: service_started
    networks:
      - iot-cloud-network

volumes:
  redpanda_data:
  appregistry_data:
  mqtt_data:
  mqtt_logs:
  fdi_packages:
  timescaledb_data:

networks:
  iot-cloud-network:
    name: iot-cloud_iot-cloud-network
    driver: bridge
